"""
Django settings for chatgpt_mirror project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-gw^4gif(3_2ijvc)l)ty0s-1e#2chgt@li=!+cnk#x&01nc*a)"

ALLOWED_HOSTS = ["*"]


# 开发时的日志配置，INFO 及以上级别的日志输出到 console。

if not os.path.exists(BASE_DIR + "/logs"):
    os.makedirs(BASE_DIR + "/logs")


if not os.path.exists(BASE_DIR + "/static"):
    os.makedirs(BASE_DIR + "/static")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "simple": {
            "format": "[%(asctime)s] %(levelname)s [%(module)s|%(lineno)s] - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {"level": "INFO", "class": "logging.StreamHandler", "formatter": "simple"},
        "default": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "formatter": "simple",
            "filename": BASE_DIR + "/logs/default.log",
            "when": "midnight",
            "interval": 1,
            "backupCount": 7,
        },
        "cron": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "formatter": "simple",
            "filename": BASE_DIR + "/logs/cron.log",
            "when": "midnight",
            "interval": 1,
            "backupCount": 7,
        },
        "errors": {
            "level": "WARNING",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "formatter": "simple",
            "filename": BASE_DIR + "/logs/errors.log",
            "when": "midnight",
            "interval": 1,
            "backupCount": 7,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "errors"],
            "propagate": "ERROR",
            "level": "INFO",
        },
        "cron":{
            "handlers": ["console", "cron", "errors"],
            "level": "INFO",
        },
        "default": {
            "handlers": ["console", "default", "errors"],
            "level": "INFO",
        },
    },
}

logging.config.dictConfig(LOGGING)
default_logger = logging.getLogger("default")

# Application definition

INSTALLED_APPS = [
    # "simpleui",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "app.accounts",
    "app.chatgpt",
    "django_crontab",
]

# django simpleui
# SIMPLEUI_HOME_INFO = False
# SIMPLEUI_HOME_QUICK = False
# SIMPLEUI_DEFAULT_THEME = "gray.css"


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "PAGE_SIZE": 10,
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
}

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"

AUTH_USER_MODEL = "accounts.User"

logs_path = "{}/logs".format(BASE_DIR)
if not os.path.exists(logs_path):
    os.makedirs(logs_path)

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DB_PATH = "{}/db".format(BASE_DIR)
if not os.path.exists(DB_PATH):
    os.makedirs(DB_PATH)

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "{}/db.sqlite3".format(DB_PATH),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DJANGO_ENV = os.environ.get("DJANGO_ENV")

if DJANGO_ENV == "PRODUCTION":
    # 生产环境
    print("PRODUCTION environment")
    from app.config.production import *


else:  # if DJANGO_ENV == "LOCAL":
    # 本地开发 环境
    print("local environment")
    from app.config.local import *
